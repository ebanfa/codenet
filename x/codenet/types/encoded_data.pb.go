// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: codenet/codenet/encoded_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EncodedData struct {
	DataSegments      uint32 `protobuf:"varint,1,opt,name=dataSegments,proto3" json:"dataSegments,omitempty"`
	ParitySegments    uint32 `protobuf:"varint,2,opt,name=paritySegments,proto3" json:"paritySegments,omitempty"`
	EncodingProof     []byte `protobuf:"bytes,3,opt,name=encodingProof,proto3" json:"encodingProof,omitempty"`
	Timestamp         uint64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Creator           string `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	EncodedDataId     uint64 `protobuf:"varint,6,opt,name=encodedDataId,proto3" json:"encodedDataId,omitempty"`
	EncodingAlgorithm string `protobuf:"bytes,7,opt,name=encodingAlgorithm,proto3" json:"encodingAlgorithm,omitempty"`
	DataSize          uint64 `protobuf:"varint,8,opt,name=dataSize,proto3" json:"dataSize,omitempty"`
	Checksum          string `protobuf:"bytes,9,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Version           uint32 `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *EncodedData) Reset()         { *m = EncodedData{} }
func (m *EncodedData) String() string { return proto.CompactTextString(m) }
func (*EncodedData) ProtoMessage()    {}
func (*EncodedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_eef394065608772c, []int{0}
}
func (m *EncodedData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncodedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncodedData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncodedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodedData.Merge(m, src)
}
func (m *EncodedData) XXX_Size() int {
	return m.Size()
}
func (m *EncodedData) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodedData.DiscardUnknown(m)
}

var xxx_messageInfo_EncodedData proto.InternalMessageInfo

func (m *EncodedData) GetDataSegments() uint32 {
	if m != nil {
		return m.DataSegments
	}
	return 0
}

func (m *EncodedData) GetParitySegments() uint32 {
	if m != nil {
		return m.ParitySegments
	}
	return 0
}

func (m *EncodedData) GetEncodingProof() []byte {
	if m != nil {
		return m.EncodingProof
	}
	return nil
}

func (m *EncodedData) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *EncodedData) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EncodedData) GetEncodedDataId() uint64 {
	if m != nil {
		return m.EncodedDataId
	}
	return 0
}

func (m *EncodedData) GetEncodingAlgorithm() string {
	if m != nil {
		return m.EncodingAlgorithm
	}
	return ""
}

func (m *EncodedData) GetDataSize() uint64 {
	if m != nil {
		return m.DataSize
	}
	return 0
}

func (m *EncodedData) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *EncodedData) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*EncodedData)(nil), "codenet.codenet.EncodedData")
}

func init() {
	proto.RegisterFile("codenet/codenet/encoded_data.proto", fileDescriptor_eef394065608772c)
}

var fileDescriptor_eef394065608772c = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0xc1, 0x4a, 0xc3, 0x40,
	0x14, 0xcc, 0xd6, 0xda, 0x36, 0x6b, 0xab, 0xb8, 0x17, 0x17, 0x91, 0x25, 0x04, 0x91, 0x1c, 0xa4,
	0x22, 0x7e, 0x81, 0xa2, 0x07, 0x6f, 0x12, 0x6f, 0x5e, 0x64, 0x4d, 0x9e, 0xe9, 0xa2, 0xc9, 0x86,
	0xcd, 0x53, 0xac, 0x5f, 0xe1, 0x67, 0x79, 0xec, 0xd1, 0x8b, 0x20, 0xc9, 0x8f, 0x48, 0xb6, 0x4d,
	0x24, 0xf6, 0xf4, 0x32, 0xf3, 0x26, 0xb3, 0xb3, 0x3b, 0xd4, 0x8f, 0x74, 0x0c, 0x19, 0xe0, 0x49,
	0x33, 0x21, 0xab, 0xbf, 0xe2, 0xfb, 0x58, 0xa2, 0x9c, 0xe6, 0x46, 0xa3, 0x66, 0x3b, 0xab, 0xdd,
	0x74, 0x35, 0xfd, 0xef, 0x1e, 0xdd, 0xba, 0x5a, 0xea, 0x2e, 0x25, 0x4a, 0xe6, 0xd3, 0x71, 0x2d,
	0xbf, 0x85, 0x24, 0x85, 0x0c, 0x0b, 0x4e, 0x3c, 0x12, 0x4c, 0xc2, 0x0e, 0xc7, 0x8e, 0xe8, 0x76,
	0x2e, 0x8d, 0xc2, 0x79, 0xab, 0xea, 0x59, 0xd5, 0x3f, 0x96, 0x1d, 0xd2, 0x89, 0x8d, 0xa0, 0xb2,
	0xe4, 0xc6, 0x68, 0xfd, 0xc8, 0x37, 0x3c, 0x12, 0x8c, 0xc3, 0x2e, 0xc9, 0x0e, 0xa8, 0x8b, 0x2a,
	0x85, 0x02, 0x65, 0x9a, 0xf3, 0xbe, 0x47, 0x82, 0x7e, 0xf8, 0x47, 0x30, 0x4e, 0x87, 0x91, 0x01,
	0x89, 0xda, 0xf0, 0x4d, 0x8f, 0x04, 0x6e, 0xd8, 0xc0, 0xd6, 0x7d, 0x19, 0xfc, 0x3a, 0xe6, 0x03,
	0xfb, 0x6f, 0x97, 0x64, 0xc7, 0x74, 0xb7, 0x39, 0xee, 0xfc, 0x39, 0xd1, 0x46, 0xe1, 0x2c, 0xe5,
	0x43, 0xeb, 0xb4, 0xbe, 0x60, 0xfb, 0x74, 0x64, 0x6f, 0xaa, 0xde, 0x81, 0x8f, 0xac, 0x5d, 0x8b,
	0xeb, 0x5d, 0x34, 0x83, 0xe8, 0xa9, 0x78, 0x49, 0xb9, 0x6b, 0x0d, 0x5a, 0x5c, 0xa7, 0x7c, 0x05,
	0x53, 0x28, 0x9d, 0x71, 0x6a, 0x9f, 0xa2, 0x81, 0x17, 0xa7, 0x9f, 0xa5, 0x20, 0x8b, 0x52, 0x90,
	0x9f, 0x52, 0x90, 0x8f, 0x4a, 0x38, 0x8b, 0x4a, 0x38, 0x5f, 0x95, 0x70, 0xee, 0xf6, 0x9a, 0x9a,
	0xde, 0xda, 0xc2, 0x70, 0x9e, 0x43, 0xf1, 0x30, 0xb0, 0x55, 0x9d, 0xfd, 0x06, 0x00, 0x00, 0xff,
	0xff, 0xf0, 0x21, 0x11, 0x9c, 0xd0, 0x01, 0x00, 0x00,
}

func (m *EncodedData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncodedData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncodedData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintEncodedData(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintEncodedData(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x4a
	}
	if m.DataSize != 0 {
		i = encodeVarintEncodedData(dAtA, i, uint64(m.DataSize))
		i--
		dAtA[i] = 0x40
	}
	if len(m.EncodingAlgorithm) > 0 {
		i -= len(m.EncodingAlgorithm)
		copy(dAtA[i:], m.EncodingAlgorithm)
		i = encodeVarintEncodedData(dAtA, i, uint64(len(m.EncodingAlgorithm)))
		i--
		dAtA[i] = 0x3a
	}
	if m.EncodedDataId != 0 {
		i = encodeVarintEncodedData(dAtA, i, uint64(m.EncodedDataId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEncodedData(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Timestamp != 0 {
		i = encodeVarintEncodedData(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EncodingProof) > 0 {
		i -= len(m.EncodingProof)
		copy(dAtA[i:], m.EncodingProof)
		i = encodeVarintEncodedData(dAtA, i, uint64(len(m.EncodingProof)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ParitySegments != 0 {
		i = encodeVarintEncodedData(dAtA, i, uint64(m.ParitySegments))
		i--
		dAtA[i] = 0x10
	}
	if m.DataSegments != 0 {
		i = encodeVarintEncodedData(dAtA, i, uint64(m.DataSegments))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEncodedData(dAtA []byte, offset int, v uint64) int {
	offset -= sovEncodedData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EncodedData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataSegments != 0 {
		n += 1 + sovEncodedData(uint64(m.DataSegments))
	}
	if m.ParitySegments != 0 {
		n += 1 + sovEncodedData(uint64(m.ParitySegments))
	}
	l = len(m.EncodingProof)
	if l > 0 {
		n += 1 + l + sovEncodedData(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovEncodedData(uint64(m.Timestamp))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEncodedData(uint64(l))
	}
	if m.EncodedDataId != 0 {
		n += 1 + sovEncodedData(uint64(m.EncodedDataId))
	}
	l = len(m.EncodingAlgorithm)
	if l > 0 {
		n += 1 + l + sovEncodedData(uint64(l))
	}
	if m.DataSize != 0 {
		n += 1 + sovEncodedData(uint64(m.DataSize))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovEncodedData(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovEncodedData(uint64(m.Version))
	}
	return n
}

func sovEncodedData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEncodedData(x uint64) (n int) {
	return sovEncodedData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EncodedData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncodedData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncodedData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncodedData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSegments", wireType)
			}
			m.DataSegments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncodedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataSegments |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParitySegments", wireType)
			}
			m.ParitySegments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncodedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParitySegments |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodingProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncodedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEncodedData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEncodedData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodingProof = append(m.EncodingProof[:0], dAtA[iNdEx:postIndex]...)
			if m.EncodingProof == nil {
				m.EncodingProof = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncodedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncodedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncodedData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEncodedData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedDataId", wireType)
			}
			m.EncodedDataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncodedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncodedDataId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodingAlgorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncodedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncodedData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEncodedData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodingAlgorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSize", wireType)
			}
			m.DataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncodedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncodedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncodedData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEncodedData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncodedData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEncodedData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEncodedData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEncodedData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEncodedData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEncodedData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEncodedData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEncodedData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEncodedData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEncodedData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEncodedData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEncodedData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEncodedData = fmt.Errorf("proto: unexpected end of group")
)
