// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: codenet/codenet/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetEncodedDataByIdRequest struct {
	EncodedDataId uint64 `protobuf:"varint,1,opt,name=encodedDataId,proto3" json:"encodedDataId,omitempty"`
}

func (m *QueryGetEncodedDataByIdRequest) Reset()         { *m = QueryGetEncodedDataByIdRequest{} }
func (m *QueryGetEncodedDataByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncodedDataByIdRequest) ProtoMessage()    {}
func (*QueryGetEncodedDataByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{2}
}
func (m *QueryGetEncodedDataByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncodedDataByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncodedDataByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncodedDataByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncodedDataByIdRequest.Merge(m, src)
}
func (m *QueryGetEncodedDataByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncodedDataByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncodedDataByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncodedDataByIdRequest proto.InternalMessageInfo

func (m *QueryGetEncodedDataByIdRequest) GetEncodedDataId() uint64 {
	if m != nil {
		return m.EncodedDataId
	}
	return 0
}

type QueryGetEncodedDataByIdResponse struct {
	EncodedData EncodedData `protobuf:"bytes,1,opt,name=encodedData,proto3" json:"encodedData"`
}

func (m *QueryGetEncodedDataByIdResponse) Reset()         { *m = QueryGetEncodedDataByIdResponse{} }
func (m *QueryGetEncodedDataByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncodedDataByIdResponse) ProtoMessage()    {}
func (*QueryGetEncodedDataByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{3}
}
func (m *QueryGetEncodedDataByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncodedDataByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncodedDataByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncodedDataByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncodedDataByIdResponse.Merge(m, src)
}
func (m *QueryGetEncodedDataByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncodedDataByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncodedDataByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncodedDataByIdResponse proto.InternalMessageInfo

func (m *QueryGetEncodedDataByIdResponse) GetEncodedData() EncodedData {
	if m != nil {
		return m.EncodedData
	}
	return EncodedData{}
}

type QueryGetProofByIdRequest struct {
	EncodedDataId uint64 `protobuf:"varint,1,opt,name=encodedDataId,proto3" json:"encodedDataId,omitempty"`
}

func (m *QueryGetProofByIdRequest) Reset()         { *m = QueryGetProofByIdRequest{} }
func (m *QueryGetProofByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProofByIdRequest) ProtoMessage()    {}
func (*QueryGetProofByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{4}
}
func (m *QueryGetProofByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProofByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProofByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProofByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProofByIdRequest.Merge(m, src)
}
func (m *QueryGetProofByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProofByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProofByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProofByIdRequest proto.InternalMessageInfo

func (m *QueryGetProofByIdRequest) GetEncodedDataId() uint64 {
	if m != nil {
		return m.EncodedDataId
	}
	return 0
}

type QueryGetProofByIdResponse struct {
	Proof []uint64 `protobuf:"varint,1,rep,packed,name=proof,proto3" json:"proof,omitempty"`
}

func (m *QueryGetProofByIdResponse) Reset()         { *m = QueryGetProofByIdResponse{} }
func (m *QueryGetProofByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProofByIdResponse) ProtoMessage()    {}
func (*QueryGetProofByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{5}
}
func (m *QueryGetProofByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProofByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProofByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProofByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProofByIdResponse.Merge(m, src)
}
func (m *QueryGetProofByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProofByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProofByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProofByIdResponse proto.InternalMessageInfo

func (m *QueryGetProofByIdResponse) GetProof() []uint64 {
	if m != nil {
		return m.Proof
	}
	return nil
}

type QueryGetCreatorByIdRequest struct {
	EncodedDataId uint64 `protobuf:"varint,1,opt,name=encodedDataId,proto3" json:"encodedDataId,omitempty"`
}

func (m *QueryGetCreatorByIdRequest) Reset()         { *m = QueryGetCreatorByIdRequest{} }
func (m *QueryGetCreatorByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCreatorByIdRequest) ProtoMessage()    {}
func (*QueryGetCreatorByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{6}
}
func (m *QueryGetCreatorByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCreatorByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCreatorByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCreatorByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCreatorByIdRequest.Merge(m, src)
}
func (m *QueryGetCreatorByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCreatorByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCreatorByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCreatorByIdRequest proto.InternalMessageInfo

func (m *QueryGetCreatorByIdRequest) GetEncodedDataId() uint64 {
	if m != nil {
		return m.EncodedDataId
	}
	return 0
}

type QueryGetCreatorByIdResponse struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *QueryGetCreatorByIdResponse) Reset()         { *m = QueryGetCreatorByIdResponse{} }
func (m *QueryGetCreatorByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCreatorByIdResponse) ProtoMessage()    {}
func (*QueryGetCreatorByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{7}
}
func (m *QueryGetCreatorByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCreatorByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCreatorByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCreatorByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCreatorByIdResponse.Merge(m, src)
}
func (m *QueryGetCreatorByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCreatorByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCreatorByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCreatorByIdResponse proto.InternalMessageInfo

func (m *QueryGetCreatorByIdResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type QueryGetVerificationStatusByIdRequest struct {
	EncodedDataId uint64 `protobuf:"varint,1,opt,name=encodedDataId,proto3" json:"encodedDataId,omitempty"`
}

func (m *QueryGetVerificationStatusByIdRequest) Reset()         { *m = QueryGetVerificationStatusByIdRequest{} }
func (m *QueryGetVerificationStatusByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVerificationStatusByIdRequest) ProtoMessage()    {}
func (*QueryGetVerificationStatusByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{8}
}
func (m *QueryGetVerificationStatusByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVerificationStatusByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVerificationStatusByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVerificationStatusByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVerificationStatusByIdRequest.Merge(m, src)
}
func (m *QueryGetVerificationStatusByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVerificationStatusByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVerificationStatusByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVerificationStatusByIdRequest proto.InternalMessageInfo

func (m *QueryGetVerificationStatusByIdRequest) GetEncodedDataId() uint64 {
	if m != nil {
		return m.EncodedDataId
	}
	return 0
}

type QueryGetVerificationStatusByIdResponse struct {
	VerificationStatus string `protobuf:"bytes,1,opt,name=verificationStatus,proto3" json:"verificationStatus,omitempty"`
}

func (m *QueryGetVerificationStatusByIdResponse) Reset() {
	*m = QueryGetVerificationStatusByIdResponse{}
}
func (m *QueryGetVerificationStatusByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVerificationStatusByIdResponse) ProtoMessage()    {}
func (*QueryGetVerificationStatusByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{9}
}
func (m *QueryGetVerificationStatusByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVerificationStatusByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVerificationStatusByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVerificationStatusByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVerificationStatusByIdResponse.Merge(m, src)
}
func (m *QueryGetVerificationStatusByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVerificationStatusByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVerificationStatusByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVerificationStatusByIdResponse proto.InternalMessageInfo

func (m *QueryGetVerificationStatusByIdResponse) GetVerificationStatus() string {
	if m != nil {
		return m.VerificationStatus
	}
	return ""
}

type QueryGetEncodedDataByCreatorRequest struct {
	Creator    string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEncodedDataByCreatorRequest) Reset()         { *m = QueryGetEncodedDataByCreatorRequest{} }
func (m *QueryGetEncodedDataByCreatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncodedDataByCreatorRequest) ProtoMessage()    {}
func (*QueryGetEncodedDataByCreatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{10}
}
func (m *QueryGetEncodedDataByCreatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncodedDataByCreatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncodedDataByCreatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncodedDataByCreatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncodedDataByCreatorRequest.Merge(m, src)
}
func (m *QueryGetEncodedDataByCreatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncodedDataByCreatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncodedDataByCreatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncodedDataByCreatorRequest proto.InternalMessageInfo

func (m *QueryGetEncodedDataByCreatorRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryGetEncodedDataByCreatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetEncodedDataByCreatorResponse struct {
	EncodedDataList *EncodedData        `protobuf:"bytes,1,opt,name=encodedDataList,proto3" json:"encodedDataList,omitempty"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEncodedDataByCreatorResponse) Reset()         { *m = QueryGetEncodedDataByCreatorResponse{} }
func (m *QueryGetEncodedDataByCreatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncodedDataByCreatorResponse) ProtoMessage()    {}
func (*QueryGetEncodedDataByCreatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{11}
}
func (m *QueryGetEncodedDataByCreatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncodedDataByCreatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncodedDataByCreatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncodedDataByCreatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncodedDataByCreatorResponse.Merge(m, src)
}
func (m *QueryGetEncodedDataByCreatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncodedDataByCreatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncodedDataByCreatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncodedDataByCreatorResponse proto.InternalMessageInfo

func (m *QueryGetEncodedDataByCreatorResponse) GetEncodedDataList() *EncodedData {
	if m != nil {
		return m.EncodedDataList
	}
	return nil
}

func (m *QueryGetEncodedDataByCreatorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetEncodedDataByTimestampRequest struct {
	Timestamp  uint64             `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEncodedDataByTimestampRequest) Reset()         { *m = QueryGetEncodedDataByTimestampRequest{} }
func (m *QueryGetEncodedDataByTimestampRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncodedDataByTimestampRequest) ProtoMessage()    {}
func (*QueryGetEncodedDataByTimestampRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{12}
}
func (m *QueryGetEncodedDataByTimestampRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncodedDataByTimestampRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncodedDataByTimestampRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncodedDataByTimestampRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncodedDataByTimestampRequest.Merge(m, src)
}
func (m *QueryGetEncodedDataByTimestampRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncodedDataByTimestampRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncodedDataByTimestampRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncodedDataByTimestampRequest proto.InternalMessageInfo

func (m *QueryGetEncodedDataByTimestampRequest) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *QueryGetEncodedDataByTimestampRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetEncodedDataByTimestampResponse struct {
	EncodedDataList *EncodedData        `protobuf:"bytes,1,opt,name=encodedDataList,proto3" json:"encodedDataList,omitempty"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEncodedDataByTimestampResponse) Reset() {
	*m = QueryGetEncodedDataByTimestampResponse{}
}
func (m *QueryGetEncodedDataByTimestampResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncodedDataByTimestampResponse) ProtoMessage()    {}
func (*QueryGetEncodedDataByTimestampResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{13}
}
func (m *QueryGetEncodedDataByTimestampResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncodedDataByTimestampResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncodedDataByTimestampResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncodedDataByTimestampResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncodedDataByTimestampResponse.Merge(m, src)
}
func (m *QueryGetEncodedDataByTimestampResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncodedDataByTimestampResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncodedDataByTimestampResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncodedDataByTimestampResponse proto.InternalMessageInfo

func (m *QueryGetEncodedDataByTimestampResponse) GetEncodedDataList() *EncodedData {
	if m != nil {
		return m.EncodedDataList
	}
	return nil
}

func (m *QueryGetEncodedDataByTimestampResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetEncodedDataByChecksumRequest struct {
	Checksum   string             `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEncodedDataByChecksumRequest) Reset()         { *m = QueryGetEncodedDataByChecksumRequest{} }
func (m *QueryGetEncodedDataByChecksumRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncodedDataByChecksumRequest) ProtoMessage()    {}
func (*QueryGetEncodedDataByChecksumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{14}
}
func (m *QueryGetEncodedDataByChecksumRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncodedDataByChecksumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncodedDataByChecksumRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncodedDataByChecksumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncodedDataByChecksumRequest.Merge(m, src)
}
func (m *QueryGetEncodedDataByChecksumRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncodedDataByChecksumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncodedDataByChecksumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncodedDataByChecksumRequest proto.InternalMessageInfo

func (m *QueryGetEncodedDataByChecksumRequest) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *QueryGetEncodedDataByChecksumRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetEncodedDataByChecksumResponse struct {
	EncodedDataList *EncodedData        `protobuf:"bytes,1,opt,name=encodedDataList,proto3" json:"encodedDataList,omitempty"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEncodedDataByChecksumResponse) Reset()         { *m = QueryGetEncodedDataByChecksumResponse{} }
func (m *QueryGetEncodedDataByChecksumResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncodedDataByChecksumResponse) ProtoMessage()    {}
func (*QueryGetEncodedDataByChecksumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{15}
}
func (m *QueryGetEncodedDataByChecksumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncodedDataByChecksumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncodedDataByChecksumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncodedDataByChecksumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncodedDataByChecksumResponse.Merge(m, src)
}
func (m *QueryGetEncodedDataByChecksumResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncodedDataByChecksumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncodedDataByChecksumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncodedDataByChecksumResponse proto.InternalMessageInfo

func (m *QueryGetEncodedDataByChecksumResponse) GetEncodedDataList() *EncodedData {
	if m != nil {
		return m.EncodedDataList
	}
	return nil
}

func (m *QueryGetEncodedDataByChecksumResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetEncodedDataByBlockNumberRequest struct {
	BlockNumber uint64             `protobuf:"varint,1,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	Pagination  *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEncodedDataByBlockNumberRequest) Reset() {
	*m = QueryGetEncodedDataByBlockNumberRequest{}
}
func (m *QueryGetEncodedDataByBlockNumberRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncodedDataByBlockNumberRequest) ProtoMessage()    {}
func (*QueryGetEncodedDataByBlockNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{16}
}
func (m *QueryGetEncodedDataByBlockNumberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncodedDataByBlockNumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncodedDataByBlockNumberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncodedDataByBlockNumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncodedDataByBlockNumberRequest.Merge(m, src)
}
func (m *QueryGetEncodedDataByBlockNumberRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncodedDataByBlockNumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncodedDataByBlockNumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncodedDataByBlockNumberRequest proto.InternalMessageInfo

func (m *QueryGetEncodedDataByBlockNumberRequest) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *QueryGetEncodedDataByBlockNumberRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetEncodedDataByBlockNumberResponse struct {
	EncodedDataList *EncodedData        `protobuf:"bytes,1,opt,name=encodedDataList,proto3" json:"encodedDataList,omitempty"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEncodedDataByBlockNumberResponse) Reset() {
	*m = QueryGetEncodedDataByBlockNumberResponse{}
}
func (m *QueryGetEncodedDataByBlockNumberResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncodedDataByBlockNumberResponse) ProtoMessage()    {}
func (*QueryGetEncodedDataByBlockNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{17}
}
func (m *QueryGetEncodedDataByBlockNumberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncodedDataByBlockNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncodedDataByBlockNumberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncodedDataByBlockNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncodedDataByBlockNumberResponse.Merge(m, src)
}
func (m *QueryGetEncodedDataByBlockNumberResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncodedDataByBlockNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncodedDataByBlockNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncodedDataByBlockNumberResponse proto.InternalMessageInfo

func (m *QueryGetEncodedDataByBlockNumberResponse) GetEncodedDataList() *EncodedData {
	if m != nil {
		return m.EncodedDataList
	}
	return nil
}

func (m *QueryGetEncodedDataByBlockNumberResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetEncodedDataCountRequest struct {
}

func (m *QueryGetEncodedDataCountRequest) Reset()         { *m = QueryGetEncodedDataCountRequest{} }
func (m *QueryGetEncodedDataCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncodedDataCountRequest) ProtoMessage()    {}
func (*QueryGetEncodedDataCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{18}
}
func (m *QueryGetEncodedDataCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncodedDataCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncodedDataCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncodedDataCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncodedDataCountRequest.Merge(m, src)
}
func (m *QueryGetEncodedDataCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncodedDataCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncodedDataCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncodedDataCountRequest proto.InternalMessageInfo

type QueryGetEncodedDataCountResponse struct {
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryGetEncodedDataCountResponse) Reset()         { *m = QueryGetEncodedDataCountResponse{} }
func (m *QueryGetEncodedDataCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncodedDataCountResponse) ProtoMessage()    {}
func (*QueryGetEncodedDataCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd912081da53b2a6, []int{19}
}
func (m *QueryGetEncodedDataCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncodedDataCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncodedDataCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncodedDataCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncodedDataCountResponse.Merge(m, src)
}
func (m *QueryGetEncodedDataCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncodedDataCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncodedDataCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncodedDataCountResponse proto.InternalMessageInfo

func (m *QueryGetEncodedDataCountResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "codenet.codenet.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "codenet.codenet.QueryParamsResponse")
	proto.RegisterType((*QueryGetEncodedDataByIdRequest)(nil), "codenet.codenet.QueryGetEncodedDataByIdRequest")
	proto.RegisterType((*QueryGetEncodedDataByIdResponse)(nil), "codenet.codenet.QueryGetEncodedDataByIdResponse")
	proto.RegisterType((*QueryGetProofByIdRequest)(nil), "codenet.codenet.QueryGetProofByIdRequest")
	proto.RegisterType((*QueryGetProofByIdResponse)(nil), "codenet.codenet.QueryGetProofByIdResponse")
	proto.RegisterType((*QueryGetCreatorByIdRequest)(nil), "codenet.codenet.QueryGetCreatorByIdRequest")
	proto.RegisterType((*QueryGetCreatorByIdResponse)(nil), "codenet.codenet.QueryGetCreatorByIdResponse")
	proto.RegisterType((*QueryGetVerificationStatusByIdRequest)(nil), "codenet.codenet.QueryGetVerificationStatusByIdRequest")
	proto.RegisterType((*QueryGetVerificationStatusByIdResponse)(nil), "codenet.codenet.QueryGetVerificationStatusByIdResponse")
	proto.RegisterType((*QueryGetEncodedDataByCreatorRequest)(nil), "codenet.codenet.QueryGetEncodedDataByCreatorRequest")
	proto.RegisterType((*QueryGetEncodedDataByCreatorResponse)(nil), "codenet.codenet.QueryGetEncodedDataByCreatorResponse")
	proto.RegisterType((*QueryGetEncodedDataByTimestampRequest)(nil), "codenet.codenet.QueryGetEncodedDataByTimestampRequest")
	proto.RegisterType((*QueryGetEncodedDataByTimestampResponse)(nil), "codenet.codenet.QueryGetEncodedDataByTimestampResponse")
	proto.RegisterType((*QueryGetEncodedDataByChecksumRequest)(nil), "codenet.codenet.QueryGetEncodedDataByChecksumRequest")
	proto.RegisterType((*QueryGetEncodedDataByChecksumResponse)(nil), "codenet.codenet.QueryGetEncodedDataByChecksumResponse")
	proto.RegisterType((*QueryGetEncodedDataByBlockNumberRequest)(nil), "codenet.codenet.QueryGetEncodedDataByBlockNumberRequest")
	proto.RegisterType((*QueryGetEncodedDataByBlockNumberResponse)(nil), "codenet.codenet.QueryGetEncodedDataByBlockNumberResponse")
	proto.RegisterType((*QueryGetEncodedDataCountRequest)(nil), "codenet.codenet.QueryGetEncodedDataCountRequest")
	proto.RegisterType((*QueryGetEncodedDataCountResponse)(nil), "codenet.codenet.QueryGetEncodedDataCountResponse")
}

func init() { proto.RegisterFile("codenet/codenet/query.proto", fileDescriptor_fd912081da53b2a6) }

var fileDescriptor_fd912081da53b2a6 = []byte{
	// 1022 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x94, 0x34, 0x90, 0x17, 0x68, 0xc5, 0x6b, 0xa4, 0x38, 0x9b, 0xc8, 0x09, 0xdb, 0xd0,
	0xa4, 0x01, 0xed, 0xd6, 0xa1, 0x24, 0x6e, 0x84, 0xda, 0xe0, 0x96, 0x44, 0x95, 0x00, 0xa5, 0x06,
	0x21, 0xc4, 0xc5, 0x1a, 0xdb, 0x53, 0xb3, 0x6a, 0xbd, 0xe3, 0x7a, 0xc7, 0x15, 0x91, 0xe5, 0x0b,
	0x17, 0x24, 0x24, 0x24, 0xa4, 0xfe, 0x00, 0x8e, 0x20, 0x71, 0xe1, 0x46, 0x11, 0x77, 0x14, 0x89,
	0x4b, 0x10, 0x1c, 0x90, 0x90, 0x10, 0x4a, 0x90, 0xf8, 0x1b, 0xc8, 0xb3, 0x6f, 0xed, 0xb5, 0xbd,
	0x6b, 0xaf, 0xab, 0x1c, 0x72, 0xc9, 0xce, 0xbe, 0x9d, 0xef, 0xcd, 0xf7, 0xbd, 0x99, 0xc9, 0xfb,
	0x0c, 0x0b, 0x25, 0x59, 0x16, 0xae, 0x50, 0x76, 0xf0, 0x7c, 0xd4, 0x10, 0xf5, 0x03, 0xab, 0x56,
	0x97, 0x4a, 0xe2, 0x45, 0x0a, 0x5a, 0xf4, 0x34, 0x5e, 0xe6, 0x55, 0xc7, 0x95, 0xb6, 0xfe, 0xeb,
	0xcf, 0x31, 0x66, 0x2b, 0xb2, 0x22, 0xf5, 0xd0, 0x6e, 0x8f, 0x28, 0xba, 0x58, 0x91, 0xb2, 0xf2,
	0x50, 0xd8, 0xbc, 0xe6, 0xd8, 0xdc, 0x75, 0xa5, 0xe2, 0xca, 0x91, 0xae, 0x47, 0x5f, 0xd7, 0x4b,
	0xd2, 0xab, 0x4a, 0xcf, 0x2e, 0x72, 0x4f, 0xf8, 0x0b, 0xda, 0x8f, 0x33, 0x45, 0xa1, 0x78, 0xc6,
	0xae, 0xf1, 0x8a, 0xe3, 0xea, 0xc9, 0x41, 0xa6, 0x7e, 0x82, 0x35, 0x5e, 0xe7, 0xd5, 0x20, 0x93,
	0xd9, 0xff, 0x55, 0xb8, 0xed, 0x51, 0xb9, 0x50, 0xe6, 0x8a, 0xfb, 0x73, 0xcc, 0x59, 0xc0, 0x7b,
	0xed, 0x35, 0xf6, 0x35, 0x30, 0x2f, 0x1e, 0x35, 0x84, 0xa7, 0xcc, 0x7b, 0x70, 0xa9, 0x27, 0xea,
	0xd5, 0xa4, 0xeb, 0x09, 0xdc, 0x86, 0x29, 0x7f, 0x81, 0x14, 0x5b, 0x66, 0x6b, 0x33, 0x1b, 0x73,
	0x56, 0x5f, 0x0d, 0x2c, 0x1f, 0x90, 0x9b, 0x3e, 0xfc, 0x7b, 0x69, 0xe2, 0xbb, 0xff, 0x7e, 0x58,
	0x67, 0x79, 0x42, 0x98, 0xbb, 0x90, 0xd6, 0x29, 0xf7, 0x84, 0x7a, 0xc7, 0xa7, 0x71, 0x87, 0x2b,
	0x9e, 0x3b, 0xb8, 0x5b, 0xa6, 0x45, 0x71, 0x05, 0x5e, 0x12, 0xdd, 0x2f, 0x77, 0xcb, 0x7a, 0x91,
	0xc9, 0x7c, 0x6f, 0xd0, 0xac, 0xc0, 0x52, 0x6c, 0x1e, 0xa2, 0x79, 0x07, 0x66, 0x42, 0x18, 0xe2,
	0xba, 0x38, 0xc0, 0x35, 0x0c, 0x9f, 0x6c, 0x13, 0xce, 0x87, 0x61, 0xe6, 0x0e, 0xa4, 0x82, 0x85,
	0xf6, 0xeb, 0x52, 0xde, 0x1f, 0x9f, 0x6a, 0x06, 0xe6, 0x23, 0x32, 0x10, 0xc9, 0x59, 0x38, 0x5f,
	0x6b, 0x07, 0x53, 0x6c, 0xf9, 0xb9, 0xb5, 0xc9, 0xbc, 0xff, 0x62, 0xe6, 0xc0, 0x08, 0x20, 0xb7,
	0xeb, 0x82, 0x2b, 0x59, 0x1f, 0x7f, 0xd9, 0x2d, 0x58, 0x88, 0xcc, 0x41, 0x0b, 0xa7, 0xe0, 0xf9,
	0x92, 0x1f, 0xd6, 0xf0, 0xe9, 0x7c, 0xf0, 0x6a, 0xbe, 0x07, 0xaf, 0x06, 0xc0, 0x8f, 0x44, 0xdd,
	0xb9, 0xef, 0x94, 0xf4, 0x59, 0xfb, 0x40, 0x71, 0xd5, 0xf0, 0xc6, 0xe7, 0xf1, 0x31, 0x5c, 0x19,
	0x95, 0x8e, 0x28, 0x59, 0x80, 0x8f, 0x07, 0x66, 0x10, 0xbb, 0x88, 0x2f, 0xe6, 0x17, 0x0c, 0x2e,
	0x47, 0x1e, 0x02, 0xd2, 0x1b, 0xf0, 0x8c, 0x95, 0x8a, 0xbb, 0x00, 0xdd, 0xcb, 0x94, 0x3a, 0xa7,
	0x4f, 0xc8, 0x15, 0xcb, 0xbf, 0x79, 0x56, 0xfb, 0xe6, 0x59, 0xfe, 0x55, 0xa7, 0x9b, 0x67, 0xed,
	0xf3, 0x8a, 0xa0, 0xac, 0xf9, 0x10, 0xd2, 0xfc, 0x91, 0xc1, 0xca, 0x70, 0x26, 0x24, 0x71, 0x17,
	0x2e, 0x86, 0xaa, 0xf3, 0xae, 0xe3, 0xa9, 0x24, 0xe7, 0x32, 0xdf, 0x0f, 0xc2, 0xbd, 0x08, 0xe2,
	0xab, 0x23, 0x89, 0xfb, 0x24, 0x7a, 0x98, 0x7f, 0xc5, 0xba, 0xbb, 0xdd, 0xc3, 0xfc, 0x43, 0xa7,
	0x2a, 0x3c, 0xc5, 0xab, 0xb5, 0xa0, 0x8a, 0x8b, 0x30, 0xad, 0x82, 0x18, 0xed, 0x74, 0x37, 0x70,
	0x6a, 0x95, 0xfc, 0x89, 0x75, 0x8f, 0x4b, 0x1c, 0x9f, 0xb3, 0x5a, 0xcb, 0x2f, 0x63, 0x4f, 0xc1,
	0xa7, 0xa2, 0xf4, 0xc0, 0x6b, 0x54, 0x83, 0x52, 0x1a, 0xf0, 0x42, 0x89, 0x42, 0x74, 0x22, 0x3b,
	0xef, 0xa7, 0x56, 0xc8, 0xa7, 0x71, 0x1b, 0xdb, 0x25, 0x73, 0x56, 0xeb, 0xf8, 0x84, 0xc1, 0x6a,
	0x24, 0xf5, 0xdc, 0x43, 0x59, 0x7a, 0xf0, 0x7e, 0xa3, 0x5a, 0x14, 0x9d, 0xbb, 0xbd, 0x0c, 0x33,
	0xc5, 0x6e, 0x94, 0xce, 0x65, 0x38, 0x74, 0x6a, 0x05, 0xfd, 0x99, 0xc1, 0xda, 0x68, 0x56, 0x67,
	0xb5, 0xa6, 0xaf, 0x44, 0xf6, 0xcb, 0xdb, 0xb2, 0xe1, 0xaa, 0xa0, 0xdb, 0x67, 0x61, 0x39, 0x7e,
	0x4a, 0xb7, 0x5d, 0x95, 0xda, 0x01, 0x2a, 0xb4, 0xff, 0xb2, 0xf1, 0xdb, 0x05, 0x38, 0xaf, 0xa1,
	0xa8, 0x60, 0xca, 0xef, 0xfd, 0x78, 0x79, 0x40, 0xe8, 0xa0, 0xc1, 0x30, 0x56, 0x86, 0x4f, 0xf2,
	0x17, 0x35, 0x97, 0x3e, 0xff, 0xfd, 0xdf, 0x27, 0xe7, 0xe6, 0x71, 0xce, 0x8e, 0xf6, 0x39, 0xf8,
	0x94, 0x01, 0x0e, 0x1a, 0x01, 0xb4, 0xa3, 0xb3, 0xc7, 0x5a, 0x0f, 0xe3, 0x5a, 0x72, 0x00, 0x51,
	0xbb, 0xa5, 0xa9, 0xdd, 0xc0, 0xad, 0x01, 0x6a, 0x15, 0xa1, 0x0a, 0x61, 0xa3, 0x55, 0x28, 0x1e,
	0x14, 0x9c, 0xb2, 0xdd, 0xec, 0x69, 0x8e, 0x2d, 0xfc, 0x86, 0xc1, 0x8b, 0x61, 0x63, 0x80, 0x57,
	0x63, 0x39, 0xf4, 0xdb, 0x0f, 0x63, 0x3d, 0xc9, 0x54, 0x22, 0x9a, 0xd5, 0x44, 0x37, 0xf0, 0x5a,
	0x24, 0x51, 0xed, 0x3a, 0x62, 0x18, 0x7e, 0xcb, 0xe0, 0x42, 0xaf, 0x87, 0xc0, 0xd7, 0x62, 0x17,
	0x1e, 0x74, 0x2b, 0xc6, 0xeb, 0xc9, 0x26, 0x13, 0xcf, 0x6d, 0xcd, 0xf3, 0x3a, 0x6e, 0x44, 0xf2,
	0xa4, 0xbe, 0x1d, 0xc3, 0xf4, 0x0f, 0x06, 0xf3, 0xb1, 0x2e, 0x03, 0x37, 0x63, 0x79, 0x0c, 0x75,
	0x39, 0xc6, 0xd6, 0xd8, 0x38, 0x92, 0xb2, 0xab, 0xa5, 0xec, 0xe0, 0xcd, 0x48, 0x29, 0x61, 0x3f,
	0x53, 0xf0, 0x34, 0x3a, 0x46, 0xd6, 0x2f, 0x0c, 0xe6, 0x62, 0x7c, 0x05, 0x5e, 0x4f, 0x76, 0x62,
	0x7b, 0x0d, 0x91, 0xf1, 0xe6, 0x98, 0x28, 0x12, 0x74, 0x53, 0x0b, 0xca, 0xe2, 0x66, 0xa2, 0xc3,
	0x4e, 0x7b, 0x65, 0x37, 0x69, 0xd0, 0xc2, 0x23, 0x7f, 0x7f, 0xa2, 0xdb, 0xfa, 0x90, 0xfd, 0x19,
	0xea, 0x4b, 0x86, 0xec, 0xcf, 0x70, 0xff, 0x60, 0xe6, 0xb4, 0x9c, 0xb7, 0x70, 0x3b, 0x91, 0x9c,
	0x8e, 0xd5, 0xb1, 0x9b, 0x9d, 0x61, 0x0b, 0x7f, 0x65, 0x90, 0x8a, 0x6b, 0xb0, 0x98, 0xb4, 0xcc,
	0xbd, 0xee, 0xc0, 0xd8, 0x1c, 0x17, 0x46, 0x7a, 0x76, 0xb4, 0x9e, 0x6d, 0xcc, 0x26, 0xdb, 0x1e,
	0x82, 0xdb, 0xcd, 0x60, 0xd4, 0xc2, 0xbf, 0x18, 0x2c, 0x0c, 0xe9, 0x6e, 0x98, 0x4d, 0xc6, 0x6c,
	0xb0, 0x4d, 0x1b, 0x37, 0x9e, 0x01, 0x49, 0xb2, 0xf6, 0xb4, 0xac, 0xb7, 0xf1, 0x56, 0x22, 0x59,
	0xba, 0xf3, 0x17, 0x5c, 0x9d, 0xc2, 0x6e, 0x86, 0x7c, 0x40, 0x0b, 0xbf, 0x67, 0x70, 0x29, 0xa2,
	0xb7, 0x61, 0xa2, 0xff, 0xfa, 0xe1, 0x4e, 0x69, 0x64, 0xc6, 0x40, 0x90, 0x0a, 0x5b, 0xab, 0xb8,
	0x8a, 0xab, 0xa3, 0x55, 0xe8, 0x9e, 0x9a, 0xcb, 0x1c, 0x1e, 0xa7, 0xd9, 0xd1, 0x71, 0x9a, 0xfd,
	0x73, 0x9c, 0x66, 0x5f, 0x9f, 0xa4, 0x27, 0x8e, 0x4e, 0xd2, 0x13, 0x7f, 0x9e, 0xa4, 0x27, 0x3e,
	0x99, 0x0b, 0x90, 0x9f, 0x75, 0x72, 0xa8, 0x83, 0x9a, 0xf0, 0x8a, 0x53, 0xfa, 0xb7, 0xfc, 0x1b,
	0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xb4, 0x64, 0x2c, 0xb0, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of GetEncodedDataById items.
	GetEncodedDataById(ctx context.Context, in *QueryGetEncodedDataByIdRequest, opts ...grpc.CallOption) (*QueryGetEncodedDataByIdResponse, error)
	// Queries a list of GetProofById items.
	GetProofById(ctx context.Context, in *QueryGetProofByIdRequest, opts ...grpc.CallOption) (*QueryGetProofByIdResponse, error)
	// Queries a list of GetCreatorById items.
	GetCreatorById(ctx context.Context, in *QueryGetCreatorByIdRequest, opts ...grpc.CallOption) (*QueryGetCreatorByIdResponse, error)
	// Queries a list of GetVerificationStatusById items.
	GetVerificationStatusById(ctx context.Context, in *QueryGetVerificationStatusByIdRequest, opts ...grpc.CallOption) (*QueryGetVerificationStatusByIdResponse, error)
	// Queries a list of GetEncodedDataByCreator items.
	GetEncodedDataByCreator(ctx context.Context, in *QueryGetEncodedDataByCreatorRequest, opts ...grpc.CallOption) (*QueryGetEncodedDataByCreatorResponse, error)
	// Queries a list of GetEncodedDataByTimestamp items.
	GetEncodedDataByTimestamp(ctx context.Context, in *QueryGetEncodedDataByTimestampRequest, opts ...grpc.CallOption) (*QueryGetEncodedDataByTimestampResponse, error)
	// Queries a list of GetEncodedDataByChecksum items.
	GetEncodedDataByChecksum(ctx context.Context, in *QueryGetEncodedDataByChecksumRequest, opts ...grpc.CallOption) (*QueryGetEncodedDataByChecksumResponse, error)
	// Queries a list of GetEncodedDataByBlockNumber items.
	GetEncodedDataByBlockNumber(ctx context.Context, in *QueryGetEncodedDataByBlockNumberRequest, opts ...grpc.CallOption) (*QueryGetEncodedDataByBlockNumberResponse, error)
	// Queries a list of GetEncodedDataCount items.
	GetEncodedDataCount(ctx context.Context, in *QueryGetEncodedDataCountRequest, opts ...grpc.CallOption) (*QueryGetEncodedDataCountResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/codenet.codenet.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEncodedDataById(ctx context.Context, in *QueryGetEncodedDataByIdRequest, opts ...grpc.CallOption) (*QueryGetEncodedDataByIdResponse, error) {
	out := new(QueryGetEncodedDataByIdResponse)
	err := c.cc.Invoke(ctx, "/codenet.codenet.Query/GetEncodedDataById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProofById(ctx context.Context, in *QueryGetProofByIdRequest, opts ...grpc.CallOption) (*QueryGetProofByIdResponse, error) {
	out := new(QueryGetProofByIdResponse)
	err := c.cc.Invoke(ctx, "/codenet.codenet.Query/GetProofById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCreatorById(ctx context.Context, in *QueryGetCreatorByIdRequest, opts ...grpc.CallOption) (*QueryGetCreatorByIdResponse, error) {
	out := new(QueryGetCreatorByIdResponse)
	err := c.cc.Invoke(ctx, "/codenet.codenet.Query/GetCreatorById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetVerificationStatusById(ctx context.Context, in *QueryGetVerificationStatusByIdRequest, opts ...grpc.CallOption) (*QueryGetVerificationStatusByIdResponse, error) {
	out := new(QueryGetVerificationStatusByIdResponse)
	err := c.cc.Invoke(ctx, "/codenet.codenet.Query/GetVerificationStatusById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEncodedDataByCreator(ctx context.Context, in *QueryGetEncodedDataByCreatorRequest, opts ...grpc.CallOption) (*QueryGetEncodedDataByCreatorResponse, error) {
	out := new(QueryGetEncodedDataByCreatorResponse)
	err := c.cc.Invoke(ctx, "/codenet.codenet.Query/GetEncodedDataByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEncodedDataByTimestamp(ctx context.Context, in *QueryGetEncodedDataByTimestampRequest, opts ...grpc.CallOption) (*QueryGetEncodedDataByTimestampResponse, error) {
	out := new(QueryGetEncodedDataByTimestampResponse)
	err := c.cc.Invoke(ctx, "/codenet.codenet.Query/GetEncodedDataByTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEncodedDataByChecksum(ctx context.Context, in *QueryGetEncodedDataByChecksumRequest, opts ...grpc.CallOption) (*QueryGetEncodedDataByChecksumResponse, error) {
	out := new(QueryGetEncodedDataByChecksumResponse)
	err := c.cc.Invoke(ctx, "/codenet.codenet.Query/GetEncodedDataByChecksum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEncodedDataByBlockNumber(ctx context.Context, in *QueryGetEncodedDataByBlockNumberRequest, opts ...grpc.CallOption) (*QueryGetEncodedDataByBlockNumberResponse, error) {
	out := new(QueryGetEncodedDataByBlockNumberResponse)
	err := c.cc.Invoke(ctx, "/codenet.codenet.Query/GetEncodedDataByBlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEncodedDataCount(ctx context.Context, in *QueryGetEncodedDataCountRequest, opts ...grpc.CallOption) (*QueryGetEncodedDataCountResponse, error) {
	out := new(QueryGetEncodedDataCountResponse)
	err := c.cc.Invoke(ctx, "/codenet.codenet.Query/GetEncodedDataCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of GetEncodedDataById items.
	GetEncodedDataById(context.Context, *QueryGetEncodedDataByIdRequest) (*QueryGetEncodedDataByIdResponse, error)
	// Queries a list of GetProofById items.
	GetProofById(context.Context, *QueryGetProofByIdRequest) (*QueryGetProofByIdResponse, error)
	// Queries a list of GetCreatorById items.
	GetCreatorById(context.Context, *QueryGetCreatorByIdRequest) (*QueryGetCreatorByIdResponse, error)
	// Queries a list of GetVerificationStatusById items.
	GetVerificationStatusById(context.Context, *QueryGetVerificationStatusByIdRequest) (*QueryGetVerificationStatusByIdResponse, error)
	// Queries a list of GetEncodedDataByCreator items.
	GetEncodedDataByCreator(context.Context, *QueryGetEncodedDataByCreatorRequest) (*QueryGetEncodedDataByCreatorResponse, error)
	// Queries a list of GetEncodedDataByTimestamp items.
	GetEncodedDataByTimestamp(context.Context, *QueryGetEncodedDataByTimestampRequest) (*QueryGetEncodedDataByTimestampResponse, error)
	// Queries a list of GetEncodedDataByChecksum items.
	GetEncodedDataByChecksum(context.Context, *QueryGetEncodedDataByChecksumRequest) (*QueryGetEncodedDataByChecksumResponse, error)
	// Queries a list of GetEncodedDataByBlockNumber items.
	GetEncodedDataByBlockNumber(context.Context, *QueryGetEncodedDataByBlockNumberRequest) (*QueryGetEncodedDataByBlockNumberResponse, error)
	// Queries a list of GetEncodedDataCount items.
	GetEncodedDataCount(context.Context, *QueryGetEncodedDataCountRequest) (*QueryGetEncodedDataCountResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetEncodedDataById(ctx context.Context, req *QueryGetEncodedDataByIdRequest) (*QueryGetEncodedDataByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEncodedDataById not implemented")
}
func (*UnimplementedQueryServer) GetProofById(ctx context.Context, req *QueryGetProofByIdRequest) (*QueryGetProofByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProofById not implemented")
}
func (*UnimplementedQueryServer) GetCreatorById(ctx context.Context, req *QueryGetCreatorByIdRequest) (*QueryGetCreatorByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreatorById not implemented")
}
func (*UnimplementedQueryServer) GetVerificationStatusById(ctx context.Context, req *QueryGetVerificationStatusByIdRequest) (*QueryGetVerificationStatusByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerificationStatusById not implemented")
}
func (*UnimplementedQueryServer) GetEncodedDataByCreator(ctx context.Context, req *QueryGetEncodedDataByCreatorRequest) (*QueryGetEncodedDataByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEncodedDataByCreator not implemented")
}
func (*UnimplementedQueryServer) GetEncodedDataByTimestamp(ctx context.Context, req *QueryGetEncodedDataByTimestampRequest) (*QueryGetEncodedDataByTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEncodedDataByTimestamp not implemented")
}
func (*UnimplementedQueryServer) GetEncodedDataByChecksum(ctx context.Context, req *QueryGetEncodedDataByChecksumRequest) (*QueryGetEncodedDataByChecksumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEncodedDataByChecksum not implemented")
}
func (*UnimplementedQueryServer) GetEncodedDataByBlockNumber(ctx context.Context, req *QueryGetEncodedDataByBlockNumberRequest) (*QueryGetEncodedDataByBlockNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEncodedDataByBlockNumber not implemented")
}
func (*UnimplementedQueryServer) GetEncodedDataCount(ctx context.Context, req *QueryGetEncodedDataCountRequest) (*QueryGetEncodedDataCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEncodedDataCount not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codenet.codenet.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEncodedDataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEncodedDataByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEncodedDataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codenet.codenet.Query/GetEncodedDataById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEncodedDataById(ctx, req.(*QueryGetEncodedDataByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProofById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProofByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProofById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codenet.codenet.Query/GetProofById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProofById(ctx, req.(*QueryGetProofByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCreatorById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCreatorByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCreatorById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codenet.codenet.Query/GetCreatorById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCreatorById(ctx, req.(*QueryGetCreatorByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetVerificationStatusById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVerificationStatusByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetVerificationStatusById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codenet.codenet.Query/GetVerificationStatusById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetVerificationStatusById(ctx, req.(*QueryGetVerificationStatusByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEncodedDataByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEncodedDataByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEncodedDataByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codenet.codenet.Query/GetEncodedDataByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEncodedDataByCreator(ctx, req.(*QueryGetEncodedDataByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEncodedDataByTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEncodedDataByTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEncodedDataByTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codenet.codenet.Query/GetEncodedDataByTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEncodedDataByTimestamp(ctx, req.(*QueryGetEncodedDataByTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEncodedDataByChecksum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEncodedDataByChecksumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEncodedDataByChecksum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codenet.codenet.Query/GetEncodedDataByChecksum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEncodedDataByChecksum(ctx, req.(*QueryGetEncodedDataByChecksumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEncodedDataByBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEncodedDataByBlockNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEncodedDataByBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codenet.codenet.Query/GetEncodedDataByBlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEncodedDataByBlockNumber(ctx, req.(*QueryGetEncodedDataByBlockNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEncodedDataCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEncodedDataCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEncodedDataCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codenet.codenet.Query/GetEncodedDataCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEncodedDataCount(ctx, req.(*QueryGetEncodedDataCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "codenet.codenet.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetEncodedDataById",
			Handler:    _Query_GetEncodedDataById_Handler,
		},
		{
			MethodName: "GetProofById",
			Handler:    _Query_GetProofById_Handler,
		},
		{
			MethodName: "GetCreatorById",
			Handler:    _Query_GetCreatorById_Handler,
		},
		{
			MethodName: "GetVerificationStatusById",
			Handler:    _Query_GetVerificationStatusById_Handler,
		},
		{
			MethodName: "GetEncodedDataByCreator",
			Handler:    _Query_GetEncodedDataByCreator_Handler,
		},
		{
			MethodName: "GetEncodedDataByTimestamp",
			Handler:    _Query_GetEncodedDataByTimestamp_Handler,
		},
		{
			MethodName: "GetEncodedDataByChecksum",
			Handler:    _Query_GetEncodedDataByChecksum_Handler,
		},
		{
			MethodName: "GetEncodedDataByBlockNumber",
			Handler:    _Query_GetEncodedDataByBlockNumber_Handler,
		},
		{
			MethodName: "GetEncodedDataCount",
			Handler:    _Query_GetEncodedDataCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "codenet/codenet/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetEncodedDataByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncodedDataByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncodedDataByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EncodedDataId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EncodedDataId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEncodedDataByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncodedDataByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncodedDataByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EncodedData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetProofByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProofByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProofByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EncodedDataId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EncodedDataId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProofByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProofByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProofByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		dAtA4 := make([]byte, len(m.Proof)*10)
		var j3 int
		for _, num := range m.Proof {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintQuery(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCreatorByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCreatorByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCreatorByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EncodedDataId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EncodedDataId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCreatorByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCreatorByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCreatorByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVerificationStatusByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVerificationStatusByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVerificationStatusByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EncodedDataId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EncodedDataId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVerificationStatusByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVerificationStatusByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVerificationStatusByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerificationStatus) > 0 {
		i -= len(m.VerificationStatus)
		copy(dAtA[i:], m.VerificationStatus)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VerificationStatus)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEncodedDataByCreatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncodedDataByCreatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncodedDataByCreatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEncodedDataByCreatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncodedDataByCreatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncodedDataByCreatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EncodedDataList != nil {
		{
			size, err := m.EncodedDataList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEncodedDataByTimestampRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncodedDataByTimestampRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncodedDataByTimestampRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEncodedDataByTimestampResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncodedDataByTimestampResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncodedDataByTimestampResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EncodedDataList != nil {
		{
			size, err := m.EncodedDataList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEncodedDataByChecksumRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncodedDataByChecksumRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncodedDataByChecksumRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEncodedDataByChecksumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncodedDataByChecksumResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncodedDataByChecksumResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EncodedDataList != nil {
		{
			size, err := m.EncodedDataList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEncodedDataByBlockNumberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncodedDataByBlockNumberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncodedDataByBlockNumberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BlockNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEncodedDataByBlockNumberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncodedDataByBlockNumberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncodedDataByBlockNumberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EncodedDataList != nil {
		{
			size, err := m.EncodedDataList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEncodedDataCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncodedDataCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncodedDataCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetEncodedDataCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncodedDataCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncodedDataCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetEncodedDataByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EncodedDataId != 0 {
		n += 1 + sovQuery(uint64(m.EncodedDataId))
	}
	return n
}

func (m *QueryGetEncodedDataByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EncodedData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetProofByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EncodedDataId != 0 {
		n += 1 + sovQuery(uint64(m.EncodedDataId))
	}
	return n
}

func (m *QueryGetProofByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Proof) > 0 {
		l = 0
		for _, e := range m.Proof {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryGetCreatorByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EncodedDataId != 0 {
		n += 1 + sovQuery(uint64(m.EncodedDataId))
	}
	return n
}

func (m *QueryGetCreatorByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVerificationStatusByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EncodedDataId != 0 {
		n += 1 + sovQuery(uint64(m.EncodedDataId))
	}
	return n
}

func (m *QueryGetVerificationStatusByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VerificationStatus)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEncodedDataByCreatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEncodedDataByCreatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EncodedDataList != nil {
		l = m.EncodedDataList.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEncodedDataByTimestampRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEncodedDataByTimestampResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EncodedDataList != nil {
		l = m.EncodedDataList.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEncodedDataByChecksumRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEncodedDataByChecksumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EncodedDataList != nil {
		l = m.EncodedDataList.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEncodedDataByBlockNumberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockNumber != 0 {
		n += 1 + sovQuery(uint64(m.BlockNumber))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEncodedDataByBlockNumberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EncodedDataList != nil {
		l = m.EncodedDataList.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEncodedDataCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetEncodedDataCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncodedDataByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncodedDataByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncodedDataByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedDataId", wireType)
			}
			m.EncodedDataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncodedDataId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncodedDataByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncodedDataByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncodedDataByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EncodedData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProofByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProofByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProofByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedDataId", wireType)
			}
			m.EncodedDataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncodedDataId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProofByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProofByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProofByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Proof = append(m.Proof, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Proof) == 0 {
					m.Proof = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Proof = append(m.Proof, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCreatorByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCreatorByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCreatorByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedDataId", wireType)
			}
			m.EncodedDataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncodedDataId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCreatorByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCreatorByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCreatorByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVerificationStatusByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVerificationStatusByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVerificationStatusByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedDataId", wireType)
			}
			m.EncodedDataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncodedDataId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVerificationStatusByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVerificationStatusByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVerificationStatusByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncodedDataByCreatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncodedDataByCreatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncodedDataByCreatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncodedDataByCreatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncodedDataByCreatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncodedDataByCreatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedDataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncodedDataList == nil {
				m.EncodedDataList = &EncodedData{}
			}
			if err := m.EncodedDataList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncodedDataByTimestampRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncodedDataByTimestampRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncodedDataByTimestampRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncodedDataByTimestampResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncodedDataByTimestampResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncodedDataByTimestampResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedDataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncodedDataList == nil {
				m.EncodedDataList = &EncodedData{}
			}
			if err := m.EncodedDataList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncodedDataByChecksumRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncodedDataByChecksumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncodedDataByChecksumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncodedDataByChecksumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncodedDataByChecksumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncodedDataByChecksumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedDataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncodedDataList == nil {
				m.EncodedDataList = &EncodedData{}
			}
			if err := m.EncodedDataList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncodedDataByBlockNumberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncodedDataByBlockNumberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncodedDataByBlockNumberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncodedDataByBlockNumberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncodedDataByBlockNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncodedDataByBlockNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedDataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncodedDataList == nil {
				m.EncodedDataList = &EncodedData{}
			}
			if err := m.EncodedDataList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncodedDataCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncodedDataCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncodedDataCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncodedDataCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncodedDataCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncodedDataCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
