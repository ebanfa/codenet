syntax = "proto3";

package codenet.codenet;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "codenet/codenet/params.proto";

option go_package = "codenet/x/codenet/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams       (MsgUpdateParams      ) returns (MsgUpdateParamsResponse      );
  rpc EncodeData         (MsgEncodeData        ) returns (MsgEncodeDataResponse        );
  rpc SendIbcEncodedData (MsgSendIbcEncodedData) returns (MsgSendIbcEncodedDataResponse);
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                         "authority";
  option           (amino.name) = "codenet/x/codenet/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgEncodeData {
  option (cosmos.msg.v1.signer) = "creator";
           string creator           = 1;
           bytes data               = 2;
           string encodingAlgorithm = 3;
           uint64 dataSize          = 4;
           string checksum          = 5;
           uint32 version           = 6;
}

message MsgEncodeDataResponse {
           uint64 encodedDataId     = 1;
  repeated uint64 encodingProof     = 2;
}

message MsgSendIbcEncodedData {
  option (cosmos.msg.v1.signer) = "creator";
           bytes data              =  5;
           uint64 encodedDataId     =  6;
  repeated uint64 encodingProof     =  7;
           uint64 blockNumber       =  8;
           string encodingAlgorithm =  9;
           uint64 dataSize          = 10;
           string checksum          = 11;
           uint32 version           = 12;
           string creator           =  1;
           string port              =  2;
           string channelID         =  3;
           uint64 timeoutTimestamp  =  4;
}

message MsgSendIbcEncodedDataResponse {}

