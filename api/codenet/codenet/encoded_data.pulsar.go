// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package codenet

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_EncodedData_3_list)(nil)

type _EncodedData_3_list struct {
	list *[]uint64
}

func (x *_EncodedData_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EncodedData_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_EncodedData_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_EncodedData_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_EncodedData_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message EncodedData at list field EncodingProof as it is not of Message kind"))
}

func (x *_EncodedData_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_EncodedData_3_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_EncodedData_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_EncodedData                   protoreflect.MessageDescriptor
	fd_EncodedData_dataSegments      protoreflect.FieldDescriptor
	fd_EncodedData_paritySegments    protoreflect.FieldDescriptor
	fd_EncodedData_encodingProof     protoreflect.FieldDescriptor
	fd_EncodedData_timestamp         protoreflect.FieldDescriptor
	fd_EncodedData_creator           protoreflect.FieldDescriptor
	fd_EncodedData_encodedDataId     protoreflect.FieldDescriptor
	fd_EncodedData_encodingAlgorithm protoreflect.FieldDescriptor
	fd_EncodedData_dataSize          protoreflect.FieldDescriptor
	fd_EncodedData_checksum          protoreflect.FieldDescriptor
	fd_EncodedData_version           protoreflect.FieldDescriptor
)

func init() {
	file_codenet_codenet_encoded_data_proto_init()
	md_EncodedData = File_codenet_codenet_encoded_data_proto.Messages().ByName("EncodedData")
	fd_EncodedData_dataSegments = md_EncodedData.Fields().ByName("dataSegments")
	fd_EncodedData_paritySegments = md_EncodedData.Fields().ByName("paritySegments")
	fd_EncodedData_encodingProof = md_EncodedData.Fields().ByName("encodingProof")
	fd_EncodedData_timestamp = md_EncodedData.Fields().ByName("timestamp")
	fd_EncodedData_creator = md_EncodedData.Fields().ByName("creator")
	fd_EncodedData_encodedDataId = md_EncodedData.Fields().ByName("encodedDataId")
	fd_EncodedData_encodingAlgorithm = md_EncodedData.Fields().ByName("encodingAlgorithm")
	fd_EncodedData_dataSize = md_EncodedData.Fields().ByName("dataSize")
	fd_EncodedData_checksum = md_EncodedData.Fields().ByName("checksum")
	fd_EncodedData_version = md_EncodedData.Fields().ByName("version")
}

var _ protoreflect.Message = (*fastReflection_EncodedData)(nil)

type fastReflection_EncodedData EncodedData

func (x *EncodedData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EncodedData)(x)
}

func (x *EncodedData) slowProtoReflect() protoreflect.Message {
	mi := &file_codenet_codenet_encoded_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EncodedData_messageType fastReflection_EncodedData_messageType
var _ protoreflect.MessageType = fastReflection_EncodedData_messageType{}

type fastReflection_EncodedData_messageType struct{}

func (x fastReflection_EncodedData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EncodedData)(nil)
}
func (x fastReflection_EncodedData_messageType) New() protoreflect.Message {
	return new(fastReflection_EncodedData)
}
func (x fastReflection_EncodedData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EncodedData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EncodedData) Descriptor() protoreflect.MessageDescriptor {
	return md_EncodedData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EncodedData) Type() protoreflect.MessageType {
	return _fastReflection_EncodedData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EncodedData) New() protoreflect.Message {
	return new(fastReflection_EncodedData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EncodedData) Interface() protoreflect.ProtoMessage {
	return (*EncodedData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EncodedData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.DataSegments != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DataSegments)
		if !f(fd_EncodedData_dataSegments, value) {
			return
		}
	}
	if x.ParitySegments != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ParitySegments)
		if !f(fd_EncodedData_paritySegments, value) {
			return
		}
	}
	if len(x.EncodingProof) != 0 {
		value := protoreflect.ValueOfList(&_EncodedData_3_list{list: &x.EncodingProof})
		if !f(fd_EncodedData_encodingProof, value) {
			return
		}
	}
	if x.Timestamp != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Timestamp)
		if !f(fd_EncodedData_timestamp, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_EncodedData_creator, value) {
			return
		}
	}
	if x.EncodedDataId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EncodedDataId)
		if !f(fd_EncodedData_encodedDataId, value) {
			return
		}
	}
	if x.EncodingAlgorithm != "" {
		value := protoreflect.ValueOfString(x.EncodingAlgorithm)
		if !f(fd_EncodedData_encodingAlgorithm, value) {
			return
		}
	}
	if x.DataSize != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DataSize)
		if !f(fd_EncodedData_dataSize, value) {
			return
		}
	}
	if x.Checksum != "" {
		value := protoreflect.ValueOfString(x.Checksum)
		if !f(fd_EncodedData_checksum, value) {
			return
		}
	}
	if x.Version != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Version)
		if !f(fd_EncodedData_version, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EncodedData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "codenet.codenet.EncodedData.dataSegments":
		return x.DataSegments != uint64(0)
	case "codenet.codenet.EncodedData.paritySegments":
		return x.ParitySegments != uint64(0)
	case "codenet.codenet.EncodedData.encodingProof":
		return len(x.EncodingProof) != 0
	case "codenet.codenet.EncodedData.timestamp":
		return x.Timestamp != uint64(0)
	case "codenet.codenet.EncodedData.creator":
		return x.Creator != ""
	case "codenet.codenet.EncodedData.encodedDataId":
		return x.EncodedDataId != uint64(0)
	case "codenet.codenet.EncodedData.encodingAlgorithm":
		return x.EncodingAlgorithm != ""
	case "codenet.codenet.EncodedData.dataSize":
		return x.DataSize != uint64(0)
	case "codenet.codenet.EncodedData.checksum":
		return x.Checksum != ""
	case "codenet.codenet.EncodedData.version":
		return x.Version != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: codenet.codenet.EncodedData"))
		}
		panic(fmt.Errorf("message codenet.codenet.EncodedData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EncodedData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "codenet.codenet.EncodedData.dataSegments":
		x.DataSegments = uint64(0)
	case "codenet.codenet.EncodedData.paritySegments":
		x.ParitySegments = uint64(0)
	case "codenet.codenet.EncodedData.encodingProof":
		x.EncodingProof = nil
	case "codenet.codenet.EncodedData.timestamp":
		x.Timestamp = uint64(0)
	case "codenet.codenet.EncodedData.creator":
		x.Creator = ""
	case "codenet.codenet.EncodedData.encodedDataId":
		x.EncodedDataId = uint64(0)
	case "codenet.codenet.EncodedData.encodingAlgorithm":
		x.EncodingAlgorithm = ""
	case "codenet.codenet.EncodedData.dataSize":
		x.DataSize = uint64(0)
	case "codenet.codenet.EncodedData.checksum":
		x.Checksum = ""
	case "codenet.codenet.EncodedData.version":
		x.Version = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: codenet.codenet.EncodedData"))
		}
		panic(fmt.Errorf("message codenet.codenet.EncodedData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EncodedData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "codenet.codenet.EncodedData.dataSegments":
		value := x.DataSegments
		return protoreflect.ValueOfUint64(value)
	case "codenet.codenet.EncodedData.paritySegments":
		value := x.ParitySegments
		return protoreflect.ValueOfUint64(value)
	case "codenet.codenet.EncodedData.encodingProof":
		if len(x.EncodingProof) == 0 {
			return protoreflect.ValueOfList(&_EncodedData_3_list{})
		}
		listValue := &_EncodedData_3_list{list: &x.EncodingProof}
		return protoreflect.ValueOfList(listValue)
	case "codenet.codenet.EncodedData.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfUint64(value)
	case "codenet.codenet.EncodedData.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "codenet.codenet.EncodedData.encodedDataId":
		value := x.EncodedDataId
		return protoreflect.ValueOfUint64(value)
	case "codenet.codenet.EncodedData.encodingAlgorithm":
		value := x.EncodingAlgorithm
		return protoreflect.ValueOfString(value)
	case "codenet.codenet.EncodedData.dataSize":
		value := x.DataSize
		return protoreflect.ValueOfUint64(value)
	case "codenet.codenet.EncodedData.checksum":
		value := x.Checksum
		return protoreflect.ValueOfString(value)
	case "codenet.codenet.EncodedData.version":
		value := x.Version
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: codenet.codenet.EncodedData"))
		}
		panic(fmt.Errorf("message codenet.codenet.EncodedData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EncodedData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "codenet.codenet.EncodedData.dataSegments":
		x.DataSegments = value.Uint()
	case "codenet.codenet.EncodedData.paritySegments":
		x.ParitySegments = value.Uint()
	case "codenet.codenet.EncodedData.encodingProof":
		lv := value.List()
		clv := lv.(*_EncodedData_3_list)
		x.EncodingProof = *clv.list
	case "codenet.codenet.EncodedData.timestamp":
		x.Timestamp = value.Uint()
	case "codenet.codenet.EncodedData.creator":
		x.Creator = value.Interface().(string)
	case "codenet.codenet.EncodedData.encodedDataId":
		x.EncodedDataId = value.Uint()
	case "codenet.codenet.EncodedData.encodingAlgorithm":
		x.EncodingAlgorithm = value.Interface().(string)
	case "codenet.codenet.EncodedData.dataSize":
		x.DataSize = value.Uint()
	case "codenet.codenet.EncodedData.checksum":
		x.Checksum = value.Interface().(string)
	case "codenet.codenet.EncodedData.version":
		x.Version = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: codenet.codenet.EncodedData"))
		}
		panic(fmt.Errorf("message codenet.codenet.EncodedData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EncodedData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "codenet.codenet.EncodedData.encodingProof":
		if x.EncodingProof == nil {
			x.EncodingProof = []uint64{}
		}
		value := &_EncodedData_3_list{list: &x.EncodingProof}
		return protoreflect.ValueOfList(value)
	case "codenet.codenet.EncodedData.dataSegments":
		panic(fmt.Errorf("field dataSegments of message codenet.codenet.EncodedData is not mutable"))
	case "codenet.codenet.EncodedData.paritySegments":
		panic(fmt.Errorf("field paritySegments of message codenet.codenet.EncodedData is not mutable"))
	case "codenet.codenet.EncodedData.timestamp":
		panic(fmt.Errorf("field timestamp of message codenet.codenet.EncodedData is not mutable"))
	case "codenet.codenet.EncodedData.creator":
		panic(fmt.Errorf("field creator of message codenet.codenet.EncodedData is not mutable"))
	case "codenet.codenet.EncodedData.encodedDataId":
		panic(fmt.Errorf("field encodedDataId of message codenet.codenet.EncodedData is not mutable"))
	case "codenet.codenet.EncodedData.encodingAlgorithm":
		panic(fmt.Errorf("field encodingAlgorithm of message codenet.codenet.EncodedData is not mutable"))
	case "codenet.codenet.EncodedData.dataSize":
		panic(fmt.Errorf("field dataSize of message codenet.codenet.EncodedData is not mutable"))
	case "codenet.codenet.EncodedData.checksum":
		panic(fmt.Errorf("field checksum of message codenet.codenet.EncodedData is not mutable"))
	case "codenet.codenet.EncodedData.version":
		panic(fmt.Errorf("field version of message codenet.codenet.EncodedData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: codenet.codenet.EncodedData"))
		}
		panic(fmt.Errorf("message codenet.codenet.EncodedData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EncodedData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "codenet.codenet.EncodedData.dataSegments":
		return protoreflect.ValueOfUint64(uint64(0))
	case "codenet.codenet.EncodedData.paritySegments":
		return protoreflect.ValueOfUint64(uint64(0))
	case "codenet.codenet.EncodedData.encodingProof":
		list := []uint64{}
		return protoreflect.ValueOfList(&_EncodedData_3_list{list: &list})
	case "codenet.codenet.EncodedData.timestamp":
		return protoreflect.ValueOfUint64(uint64(0))
	case "codenet.codenet.EncodedData.creator":
		return protoreflect.ValueOfString("")
	case "codenet.codenet.EncodedData.encodedDataId":
		return protoreflect.ValueOfUint64(uint64(0))
	case "codenet.codenet.EncodedData.encodingAlgorithm":
		return protoreflect.ValueOfString("")
	case "codenet.codenet.EncodedData.dataSize":
		return protoreflect.ValueOfUint64(uint64(0))
	case "codenet.codenet.EncodedData.checksum":
		return protoreflect.ValueOfString("")
	case "codenet.codenet.EncodedData.version":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: codenet.codenet.EncodedData"))
		}
		panic(fmt.Errorf("message codenet.codenet.EncodedData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EncodedData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in codenet.codenet.EncodedData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EncodedData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EncodedData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EncodedData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EncodedData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EncodedData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.DataSegments != 0 {
			n += 1 + runtime.Sov(uint64(x.DataSegments))
		}
		if x.ParitySegments != 0 {
			n += 1 + runtime.Sov(uint64(x.ParitySegments))
		}
		if len(x.EncodingProof) > 0 {
			l = 0
			for _, e := range x.EncodingProof {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.Timestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.Timestamp))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EncodedDataId != 0 {
			n += 1 + runtime.Sov(uint64(x.EncodedDataId))
		}
		l = len(x.EncodingAlgorithm)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DataSize != 0 {
			n += 1 + runtime.Sov(uint64(x.DataSize))
		}
		l = len(x.Checksum)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Version != 0 {
			n += 1 + runtime.Sov(uint64(x.Version))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EncodedData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Version != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Version))
			i--
			dAtA[i] = 0x50
		}
		if len(x.Checksum) > 0 {
			i -= len(x.Checksum)
			copy(dAtA[i:], x.Checksum)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Checksum)))
			i--
			dAtA[i] = 0x4a
		}
		if x.DataSize != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DataSize))
			i--
			dAtA[i] = 0x40
		}
		if len(x.EncodingAlgorithm) > 0 {
			i -= len(x.EncodingAlgorithm)
			copy(dAtA[i:], x.EncodingAlgorithm)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EncodingAlgorithm)))
			i--
			dAtA[i] = 0x3a
		}
		if x.EncodedDataId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EncodedDataId))
			i--
			dAtA[i] = 0x30
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x2a
		}
		if x.Timestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Timestamp))
			i--
			dAtA[i] = 0x20
		}
		if len(x.EncodingProof) > 0 {
			var pksize2 int
			for _, num := range x.EncodingProof {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.EncodingProof {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x1a
		}
		if x.ParitySegments != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ParitySegments))
			i--
			dAtA[i] = 0x10
		}
		if x.DataSegments != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DataSegments))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EncodedData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EncodedData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EncodedData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DataSegments", wireType)
				}
				x.DataSegments = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DataSegments |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ParitySegments", wireType)
				}
				x.ParitySegments = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ParitySegments |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.EncodingProof = append(x.EncodingProof, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.EncodingProof) == 0 {
						x.EncodingProof = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.EncodingProof = append(x.EncodingProof, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EncodingProof", wireType)
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				x.Timestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Timestamp |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EncodedDataId", wireType)
				}
				x.EncodedDataId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EncodedDataId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EncodingAlgorithm", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EncodingAlgorithm = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DataSize", wireType)
				}
				x.DataSize = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DataSize |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Checksum = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
				}
				x.Version = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Version |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: codenet/codenet/encoded_data.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EncodedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSegments      uint64   `protobuf:"varint,1,opt,name=dataSegments,proto3" json:"dataSegments,omitempty"`
	ParitySegments    uint64   `protobuf:"varint,2,opt,name=paritySegments,proto3" json:"paritySegments,omitempty"`
	EncodingProof     []uint64 `protobuf:"varint,3,rep,packed,name=encodingProof,proto3" json:"encodingProof,omitempty"`
	Timestamp         uint64   `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Creator           string   `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	EncodedDataId     uint64   `protobuf:"varint,6,opt,name=encodedDataId,proto3" json:"encodedDataId,omitempty"`
	EncodingAlgorithm string   `protobuf:"bytes,7,opt,name=encodingAlgorithm,proto3" json:"encodingAlgorithm,omitempty"`
	DataSize          uint64   `protobuf:"varint,8,opt,name=dataSize,proto3" json:"dataSize,omitempty"`
	Checksum          string   `protobuf:"bytes,9,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Version           uint64   `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *EncodedData) Reset() {
	*x = EncodedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codenet_codenet_encoded_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodedData) ProtoMessage() {}

// Deprecated: Use EncodedData.ProtoReflect.Descriptor instead.
func (*EncodedData) Descriptor() ([]byte, []int) {
	return file_codenet_codenet_encoded_data_proto_rawDescGZIP(), []int{0}
}

func (x *EncodedData) GetDataSegments() uint64 {
	if x != nil {
		return x.DataSegments
	}
	return 0
}

func (x *EncodedData) GetParitySegments() uint64 {
	if x != nil {
		return x.ParitySegments
	}
	return 0
}

func (x *EncodedData) GetEncodingProof() []uint64 {
	if x != nil {
		return x.EncodingProof
	}
	return nil
}

func (x *EncodedData) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EncodedData) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *EncodedData) GetEncodedDataId() uint64 {
	if x != nil {
		return x.EncodedDataId
	}
	return 0
}

func (x *EncodedData) GetEncodingAlgorithm() string {
	if x != nil {
		return x.EncodingAlgorithm
	}
	return ""
}

func (x *EncodedData) GetDataSize() uint64 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *EncodedData) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *EncodedData) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

var File_codenet_codenet_encoded_data_proto protoreflect.FileDescriptor

var file_codenet_codenet_encoded_data_proto_rawDesc = []byte{
	0x0a, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x65,
	0x74, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x6e, 0x65, 0x74, 0x22, 0xdd, 0x02, 0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0xa6, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x65, 0x74, 0x42, 0x10, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x20, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x6e, 0x65, 0x74, 0xa2, 0x02, 0x03, 0x43, 0x43, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x6f, 0x64, 0x65,
	0x6e, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x6e, 0x65, 0x74, 0xca, 0x02, 0x0f, 0x43, 0x6f,
	0x64, 0x65, 0x6e, 0x65, 0x74, 0x5c, 0x43, 0x6f, 0x64, 0x65, 0x6e, 0x65, 0x74, 0xe2, 0x02, 0x1b,
	0x43, 0x6f, 0x64, 0x65, 0x6e, 0x65, 0x74, 0x5c, 0x43, 0x6f, 0x64, 0x65, 0x6e, 0x65, 0x74, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x43, 0x6f,
	0x64, 0x65, 0x6e, 0x65, 0x74, 0x3a, 0x3a, 0x43, 0x6f, 0x64, 0x65, 0x6e, 0x65, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_codenet_codenet_encoded_data_proto_rawDescOnce sync.Once
	file_codenet_codenet_encoded_data_proto_rawDescData = file_codenet_codenet_encoded_data_proto_rawDesc
)

func file_codenet_codenet_encoded_data_proto_rawDescGZIP() []byte {
	file_codenet_codenet_encoded_data_proto_rawDescOnce.Do(func() {
		file_codenet_codenet_encoded_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_codenet_codenet_encoded_data_proto_rawDescData)
	})
	return file_codenet_codenet_encoded_data_proto_rawDescData
}

var file_codenet_codenet_encoded_data_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_codenet_codenet_encoded_data_proto_goTypes = []interface{}{
	(*EncodedData)(nil), // 0: codenet.codenet.EncodedData
}
var file_codenet_codenet_encoded_data_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_codenet_codenet_encoded_data_proto_init() }
func file_codenet_codenet_encoded_data_proto_init() {
	if File_codenet_codenet_encoded_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_codenet_codenet_encoded_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_codenet_codenet_encoded_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_codenet_codenet_encoded_data_proto_goTypes,
		DependencyIndexes: file_codenet_codenet_encoded_data_proto_depIdxs,
		MessageInfos:      file_codenet_codenet_encoded_data_proto_msgTypes,
	}.Build()
	File_codenet_codenet_encoded_data_proto = out.File
	file_codenet_codenet_encoded_data_proto_rawDesc = nil
	file_codenet_codenet_encoded_data_proto_goTypes = nil
	file_codenet_codenet_encoded_data_proto_depIdxs = nil
}
